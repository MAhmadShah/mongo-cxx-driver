<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The mongocxx (v3) driver on MongoDB C&#43;&#43; Driver Manual</title>
    <link>https://mongocxx.org/mongocxx-v3/</link>
    <description>Recent content in The mongocxx (v3) driver on MongoDB C&#43;&#43; Driver Manual</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Aug 2016 16:11:58 +0530</lastBuildDate><atom:link href="https://mongocxx.org/mongocxx-v3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Choosing a C&#43;&#43;17 Polyfill</title>
      <link>https://mongocxx.org/mongocxx-v3/polyfill-selection/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/polyfill-selection/</guid>
      <description>The mongocxx driver uses C++17 features std::optional and std::string_view. To use the C++17 standard library implementations for these features, set the CMake configuration variable CMAKE_CXX_STANDARD to 17 or higher. Otherwise, to compile the mongocxx driver for pre-C++17 configurations, a polyfill library implementation must be selected from the following options (note: &amp;ldquo;default&amp;rdquo; refers to pre-C++17 configurations when no polyfill library is explicitly selected):
  bsoncxx (default only when -DENABLE_BSONCXX_POLY_USE_IMPLS=ON)
Select with -DBSONCXX_POLY_USE_IMPLS=ON.</description>
    </item>
    
    <item>
      <title>Connection pools</title>
      <link>https://mongocxx.org/mongocxx-v3/connection-pools/</link>
      <pubDate>Tue, 18 Apr 2017 13:39:39 -0400</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/connection-pools/</guid>
      <description>mongocxx::client vs mongocxx::pool A standalone mongocxx::client uses a single-threaded algorithm to monitor the state of the cluster it&amp;rsquo;s connected to. When connected to a replica set, the thread &amp;ldquo;stops the world&amp;rdquo; every 60 seconds to check the status of the cluster. A mongocxx::pool, on the other hand, uses a separate background thread for each server in the cluster, each of which checks the status of the server it monitors every 10 seconds.</description>
    </item>
    
    <item>
      <title>API and ABI versioning</title>
      <link>https://mongocxx.org/mongocxx-v3/api-abi-versioning/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/api-abi-versioning/</guid>
      <description>API Versioning  We use semantic versioning. bsoncxx and mongocxx both define corresponding CMake variables for MAJOR, MINOR, and PATCH.  ABI Versioning  Both bsoncxx and mongocxx both have a single scalar ABI version. Only bump ABI version on incompatible ABI change (not for ABI additions). We stay on ABI version _noabi (without bumping for incompatible changes) until ABI is stable.  Parallel Header Installation  For mongocxx, install all headers to $PREFIX/mongocxx/v$ABI/.</description>
    </item>
    
    <item>
      <title>Configuring the mongocxx driver</title>
      <link>https://mongocxx.org/mongocxx-v3/configuration/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/configuration/</guid>
      <description>In the mongocxx driver, most configuration is done via the connection URI. Some additional connection options are possible via the mongocxx::options::client class.
Configuring TLS/SSL To enable TLS (SSL), set tls=true in the URI:
 mongodb://mongodb.example.com/?tls=true
 By default, mongocxx will verify server certificates against the local system CA list. You can override that either by specifying different settings in the connection string, or by creating a mongocxx::options::tls object and passing it to tls_opts on mongocxx::options::client.</description>
    </item>
    
    <item>
      <title>Thread and fork safety</title>
      <link>https://mongocxx.org/mongocxx-v3/thread-safety/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/thread-safety/</guid>
      <description>TLDR: Always give each thread its own mongocxx::client.
In general each mongocxx::client object AND all of its child objects, including mongocxx::client_session, mongocxx::database, mongocxx::collection, and mongocxx::cursor, should be used by a single thread at a time. This is true even for clients acquired from a mongocxx::pool.
Even if you create multiple child objects from a single client, and synchronize them individually, that is unsafe as they will concurrently modify internal structures of the client.</description>
    </item>
    
    <item>
      <title>Tutorial for mongocxx</title>
      <link>https://mongocxx.org/mongocxx-v3/tutorial/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/tutorial/</guid>
      <description>See the full code for this tutorial in tutorial.cpp.
Prerequisites   A mongod instance running on localhost on port 27017.
  The mongocxx Driver. See Installation for mongocxx.
  The following statements at the top of your source file:
  #include &amp;lt;cstdint&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt; #include &amp;lt;bsoncxx/builder/basic/document.hpp&amp;gt;#include &amp;lt;bsoncxx/json.hpp&amp;gt;#include &amp;lt;mongocxx/client.hpp&amp;gt;#include &amp;lt;mongocxx/instance.hpp&amp;gt;#include &amp;lt;mongocxx/stdx.hpp&amp;gt;#include &amp;lt;mongocxx/uri.hpp&amp;gt; using bsoncxx::builder::basic::kvp; using bsoncxx::builder::basic::make_array; using bsoncxx::builder::basic::make_document; Compiling The mongocxx driver&amp;rsquo;s installation process will install a libmongocxx.</description>
    </item>
    
    <item>
      <title>Working with BSON</title>
      <link>https://mongocxx.org/mongocxx-v3/working-with-bson/</link>
      <pubDate>Mon, 15 Aug 2016 16:11:58 +0530</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/working-with-bson/</guid>
      <description>The mongocxx driver ships with a new library, bsoncxx. This article will go over some of the different types in this library, and how and when to use each. For more information and example code, see our examples.
 Document Builders Owning BSON Documents (values) Non-owning BSON Documents (views) Optionally-owning BSON Documents(view_or_value) BSON Document Lifetime Printing BSON Documents Getting Fields out of BSON Documents  Document Builders The bsoncxx library offers four interfaces for building BSON: one-off functions, a basic builder, a list builder and a stream-based builder.</description>
    </item>
    
    <item>
      <title>Client-Side Field Level Encryption with mongocxx</title>
      <link>https://mongocxx.org/mongocxx-v3/client-side-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mongocxx.org/mongocxx-v3/client-side-encryption/</guid>
      <description>Client-Side Field Level Encryption New in MongoDB 4.2 Client-Side Field Level Encryption (CSFLE) allows administrators and developers to encrypt specific data fields in addition to other MongoDB encryption features.
With CSFLE, developers can encrypt fields client side without any server-side configuration or directives. Client-Side Field Level Encryption supports workloads where applications must guarantee that unauthorized parties, including server administrators, cannot read the encrypted data.
For an overview of CSFLE, please read the official MongoDB documentation in the manual.</description>
    </item>
    
  </channel>
</rss>
